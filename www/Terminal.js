/**
* This file has been generated by Babel.
* 
* DO NOT EDIT IT DIRECTLY
* 
* Edit the JS source file src/js/Terminal.js
**/
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var exec = require('cordova/exec');

var PLUGIN_NAME = 'StripeTerminal';

var Terminal =
/*#__PURE__*/
function () {
  /**
   * Initialize Stripe Terminal
   * @param options {Object} Options to initiate Stripe Terminal
   * @return {Terminal} Instance of Stripe Terminal
   */
  function Terminal(options) {
    _classCallCheck(this, Terminal);

    this.handlers = {
      readers: [],
      error: []
    };
    this.isInitialized = false;
    this.timers = {};
    this.connecting = false;
    this.options = options || {};
  }
  /**
   * @private
   */


  _createClass(Terminal, [{
    key: "log",
    value: function log() {
      var _console;

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      (_console = console).log.apply(_console, [PLUGIN_NAME].concat(args));
    }
    /**
     * @private
     */

  }, {
    key: "resolve",
    value: function resolve(results) {
      this.log(results);
    }
    /**
     * @private
     */

  }, {
    key: "reject",
    value: function reject(msg) {
      var e = typeof msg === 'string' ? new Error(msg) : msg;
      this.emit('error', e);
      console.error(e);
    }
    /**
     * Set token provider
     * @param url {string} API URL to get the token
     */

  }, {
    key: "setTokenProvider",
    value: function setTokenProvider(url) {
      var self = this;
      this.log('setTokenProvider');
      return new Promise(function (resolve, reject) {
        exec(function (data) {
          resolve(data);
          self.isInitialized = true;
        }, reject, PLUGIN_NAME, 'setTokenProvider', [url]);
      });
    }
    /**
     * Begins discovering readers matching the given configuration.
     */

  }, {
    key: "discoverReaders",
    value: function discoverReaders() {
      var _this = this;

      var self = this;
      return new Promise(function (resolve, reject) {
        _this.log('discoverReaders');

        exec(function () {
          // set a timeout so that setTokenProvider is ready
          setTimeout(function () {
            // if discoverReaders has already been called, don't do it again
            if (self.timers['readers']) {
              resolve();
            }

            self.timers['readers'] = setInterval(function () {
              exec(function (readers) {
                self.emit('readers', readers);
              }, reject, PLUGIN_NAME, 'getReaders', []);
            }, 1000);
            resolve();
          }, 100);
        }, reject, PLUGIN_NAME, 'discoverReaders', []);
      });
    }
    /**
     * Connect to a reader.
     *
     * @param {string} serialNumber The serial number of the reader that you want to connect to.
     */

  }, {
    key: "connectReader",
    value: function connectReader(serialNumber) {
      var _this2 = this;

      return new Promise(function (resolve, reject) {
        if (!serialNumber) {
          return reject(new Error('Please specify a serialNumber'));
        }

        var self = _this2;

        if (!self.connecting) {
          self.connecting = true;
          self.log('connectReader', serialNumber);
          exec(function (res) {
            self.connecting = false;
            clearInterval(self.timers['readers']);
            resolve(res);
          }, function (err) {
            self.connecting = false;
            clearInterval(self.timers['readers']);
            reject(err);
          }, PLUGIN_NAME, 'connectReader', [serialNumber]);
        } else {
          return reject(new Error('Already connecting...'));
        }
      });
    }
    /**
     * Collect a payment for a PaymentIntent
     *
     * @param {string} clientSecret See Stripe {@link https://stripe.com/docs/api/payment_intents/object#payment_intent_object-client_secret:Payment Intents API reference} for details
     */

  }, {
    key: "collectPayment",
    value: function collectPayment(clientSecret) {
      var _this3 = this;

      return new Promise(function (resolve, reject) {
        if (!clientSecret) {
          return reject(new Error('Please specify a clientSecret'));
        }

        _this3.log('collectPayment');

        exec(resolve, reject, PLUGIN_NAME, 'collectPayment', [clientSecret]);
      });
    }
    /**
     * Get the current connection status.
     */

  }, {
    key: "connectionStatus",
    value: function connectionStatus() {
      var _this4 = this;

      return new Promise(function (resolve, reject) {
        _this4.log('connectionStatus');

        exec(resolve, reject, PLUGIN_NAME, 'connectionStatus', []);
      });
    }
    /**
     * Listen for an event.
     *
     * The following events are supported:
     *
     *   - readers
     *   - error
     *
     * @param {String} eventName to subscribe to.
     * @param {Function} callback triggered on the event.
     */

  }, {
    key: "on",
    value: function on(eventName, callback) {
      if (!this.handlers.hasOwnProperty(eventName)) {
        this.handlers[eventName] = [];
      }

      this.handlers[eventName].push(callback);
    }
    /**
     * Remove event listener.
     *
     * @param {String} eventName to match subscription.
     * @param {Function} handle function associated with event.
     */

  }, {
    key: "off",
    value: function off(eventName, handle) {
      if (this.handlers.hasOwnProperty(eventName)) {
        var handleIndex = this.handlers[eventName].indexOf(handle);

        if (handleIndex >= 0) {
          this.handlers[eventName].splice(handleIndex, 1);
        }
      }
    }
    /**
     * Emit an event.
     *
     * This is intended for internal use only.
     *
     * @param {String} eventName is the event to trigger.
     * @param {*} all arguments are passed to the event listeners.
     * @private
     *
     * @return {Boolean} is true when the event is triggered otherwise false.
     */

  }, {
    key: "emit",
    value: function emit() {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      var eventName = args.shift();

      if (!this.handlers.hasOwnProperty(eventName)) {
        return false;
      }

      for (var i = 0, length = this.handlers[eventName].length; i < length; i++) {
        var callback = this.handlers[eventName][i];

        if (typeof callback === 'function') {
          callback.apply(undefined, args);
        } else {
          console.log("event handler: ".concat(eventName, " must be a function"));
        }
      }

      return true;
    }
  }]);

  return Terminal;
}();

module.exports = Terminal;